{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"kahan sum","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"-fmMvk348i1-"},"source":["Kahan summation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sd3TqQYF8eq_","executionInfo":{"status":"ok","timestamp":1609348364580,"user_tz":300,"elapsed":508,"user":{"displayName":"Boris Garbuzov","photoUrl":"","userId":"08851466340381164023"}},"outputId":"96904313-c513-4432-d311-795d405bcc52"},"source":["import math \r\n","exact_sum = (math.pi**2)/6\r\n","print(\"exact_sum =\", exact_sum)\r\n","truncated_sum = 1 + 1/4 + 1/9 + 1/16\r\n","truncated_sum = 0\r\n","term_count = 10000\r\n","for base in range(term_count):\r\n","    truncated_sum += 1/(base+1)**2\r\n","\r\n","print(\"truncated_sum =\", truncated_sum)\r\n","\r\n","# Kahan\r\n","truncated_sum_kahan = 0\r\n","compensator = 0\r\n","cumulative_abs_c = 0\r\n","for base in range(term_count):\r\n","  term = 1/(base+1)**2\r\n","  v = term + compensator\r\n","  s = truncated_sum_kahan + v \r\n","  compensator = v - (s - truncated_sum_kahan)\r\n","  truncated_sum_kahan = s\r\n","  cumulative_abs_c += abs(compensator)\r\n","  # print(\"compensator =\", compensator)\r\n","\r\n","print(\"truncated_sum_kahan =\", truncated_sum)\r\n","print(\"cumulative_abs_c =\", cumulative_abs_c)\r\n","kahan_simple_difference = truncated_sum - truncated_sum_kahan \r\n","print(\"kahan_simple_difference =\", kahan_simple_difference)\r\n","kahan_exact_difference = truncated_sum_kahan - exact_sum \r\n","print(\"kahan_exact_difference =\", kahan_exact_difference)\r\n","simple_exact_difference = truncated_sum - exact_sum \r\n","print(\"simple_exact_difference =\", simple_exact_difference)\r\n","kahan_error = abs(kahan_exact_difference)\r\n","print(\"kahan_error =\", kahan_error)\r\n","simple_error = abs(simple_exact_difference)\r\n","print(\"simple_error =\", simple_error)\r\n","# what is greater?\r\n","print(\"kahan_error < simple_error =\", kahan_error < simple_error)\r\n","# the result is opposite. Kahan is farther away from exact. \r\n","\r\n","\r\n","\r\n","# ======================================== \r\n","\r\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["exact_sum = 1.6449340668482264\n","truncated_sum = 1.6448340718480652\n","truncated_sum_kahan = 1.6448340718480652\n","cumulative_abs_c = 5.532184560829334e-13\n","kahan_simple_difference = 5.329070518200751e-15\n","kahan_exact_difference = -9.999500016655283e-05\n","simple_exact_difference = -9.999500016122376e-05\n","kahan_error = 9.999500016655283e-05\n","simple_error = 9.999500016122376e-05\n","kahan_error < simple_error = False\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PQK4QIiGmWy3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609348364829,"user_tz":300,"elapsed":752,"user":{"displayName":"Boris Garbuzov","photoUrl":"","userId":"08851466340381164023"}},"outputId":"c184bbf3-85af-4027-95ee-6566aa97f003"},"source":["# own representation\r\n","def KahanSum(l):\r\n","    \"\"\"\r\n","    This function will find the sum\r\n","    of a given list without compromising\r\n","    on the accuracy\"\"\"\r\n","    summation = 0.0\r\n","    c = 0.0\r\n","    for i in l:\r\n","        y = i - c\r\n","        t = summation + y\r\n","        c = (t - summation) - y\r\n","        summation = t\r\n","    return summation\r\n","    \r\n","# Kahan is not for this case    \r\n","KahanSum((1,1e100,1,-1e100))   "],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3kQDNf9lG_2A","executionInfo":{"status":"ok","timestamp":1609348364830,"user_tz":300,"elapsed":749,"user":{"displayName":"Boris Garbuzov","photoUrl":"","userId":"08851466340381164023"}},"outputId":"c7ef5493-a36c-4ad4-b1c3-2fb979d01f65"},"source":["# This example is useless, because \r\n","# 1. we have no true sum, \r\n","# 2. Kahan is primarily for positive terms\r\n","\r\n","import numpy as np\r\n","sample = np.random.uniform(low=-0.0000001, high=0.0000001, size=(1000))\r\n","kahanSum = KahanSum(sample)  \r\n","simpleSum = np.sum(sample)\r\n","kahanSum - simpleSum\r\n","\r\n"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-2.117582368135751e-22"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"ux2CY-v4fMff"},"source":["Kahan for geometric progression"]},{"cell_type":"code","metadata":{"id":"D2BlbudpmW1u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609348393128,"user_tz":300,"elapsed":253,"user":{"displayName":"Boris Garbuzov","photoUrl":"","userId":"08851466340381164023"}},"outputId":"364f5d46-59b9-4247-90f0-8f83f076724f"},"source":["mySize = 7000\r\n","trueSum = 0.5*(1 - 0.5**mySize)/(1 - 0.5)\r\n","geometric = [2**(-i) for i in range(1, mySize)]\r\n","print(\"geometric[:5] =\", geometric[:5])\r\n","print(\"geometric[-5:] =\", geometric[-5:])\r\n","\r\n","kahanSum = KahanSum(geometric)  \r\n","simpleSum = np.sum(geometric)\r\n","difKahanSimple = kahanSum - simpleSum\r\n","difKahanTrue = kahanSum - trueSum\r\n","difSimpleTrue = simpleSum - trueSum\r\n","\r\n","\r\n","\r\n","print(\"trueSum =\", trueSum)\r\n","print(\"kahanSum =\", kahanSum)\r\n","print(\"simpleSum =\", simpleSum)\r\n","\r\n","print(\"difKahanSimple =\", difKahanSimple)\r\n","print(\"difKahanTrue =\", difKahanSimple)\r\n","print(\"difSimpleTrue =\", difSimpleTrue)\r\n","print(\"abs(difKahanTrue) < abs(difSimpleTrue) =\", abs(difKahanTrue) < abs(difSimpleTrue))\r\n","\r\n","\r\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["geometric[:5] = [0.5, 0.25, 0.125, 0.0625, 0.03125]\n","geometric[-5:] = [0.0, 0.0, 0.0, 0.0, 0.0]\n","trueSum = 1.0\n","kahanSum = 1.0\n","simpleSum = 1.0\n","difKahanSimple = 0.0\n","difKahanTrue = 0.0\n","difSimpleTrue = 0.0\n","abs(difKahanTrue) < abs(difSimpleTrue) = False\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jG1gqlqKfVKM"},"source":["Kahan for constant positive sequence"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bsS27VU5fZts","executionInfo":{"status":"ok","timestamp":1609348630656,"user_tz":300,"elapsed":510,"user":{"displayName":"Boris Garbuzov","photoUrl":"","userId":"08851466340381164023"}},"outputId":"4a63e461-7c17-4bd3-9dbf-d90f299c8d38"},"source":["mySize = 7000\r\n","myNumber = 1/mySize * 5\r\n","trueSum = mySize*myNumber\r\n","positiveSample = np.repeat(myNumber, mySize)\r\n","kahanSum = KahanSum(positiveSample)  \r\n","simpleSum = np.sum(positiveSample)\r\n","difKahanSimple = kahanSum - simpleSum\r\n","difKahanTrue = kahanSum - trueSum\r\n","difSimpleTrue = simpleSum - trueSum\r\n","\r\n","print(\"trueSum =\", trueSum)\r\n","print(\"kahanSum =\", kahanSum)\r\n","print(\"simpleSum =\", simpleSum)\r\n","\r\n","print(\"difKahanSimple =\", difKahanSimple)\r\n","print(\"difKahanTrue =\", difKahanSimple)\r\n","print(\"difSimpleTrue =\", difSimpleTrue)\r\n","print(\"difSimpleTrue =\", abs(difKahanTrue) < abs(difSimpleTrue))\r\n"],"execution_count":8,"outputs":[{"output_type":"stream","text":["trueSum = 5.000000000000001\n","kahanSum = 5.000000000000001\n","simpleSum = 5.0\n","difKahanSimple = 8.881784197001252e-16\n","difKahanTrue = 8.881784197001252e-16\n","difSimpleTrue = -8.881784197001252e-16\n","difSimpleTrue = True\n"],"name":"stdout"}]}]}